# app/keyboards/inline.py
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from .callback_data import SourceSelect, ArtworkRate, Action, SearchParam, SkipAction


def get_main_menu(is_authorized: bool = False):
    buttons = [
        [InlineKeyboardButton(text="üé® –û—Ü–µ–Ω–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞", callback_data="evaluate_from_file")],
        [InlineKeyboardButton(text="üîç –û—Ü–µ–Ω–∏—Ç—å –ø–æ –∑–∞–ø—Ä–æ—Å—É (TBD)", callback_data="evaluate_from_query")],
    ]
    if is_authorized:
        buttons.extend([
            [InlineKeyboardButton(text="üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", callback_data="upload_file")],
            [InlineKeyboardButton(text="üìÇ –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="my_stuff")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª", callback_data="delete_file")],
            [InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –æ—Ü–µ–Ω–æ–∫", callback_data="export_data")],
        ])
    else:
        buttons.append([InlineKeyboardButton(text="üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", callback_data="authorize")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def get_files_to_evaluate(files: list, user_progress: dict):
    buttons = []
    for file_source in files:
        # –ü–æ–º–µ—á–∞–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—á–∞–ª –æ—Ü–µ–Ω–∏–≤–∞—Ç—å
        marker = "üîÑ " if file_source.source_id in user_progress else ""
        buttons.append([
            InlineKeyboardButton(
                text=f"{marker}{file_source.name}",
                callback_data=SourceSelect(source_id=file_source.source_id).pack()
            )
        ])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_rating_keyboard(source_id: int, artwork_id: int, post_idx: int):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏, –≤–∫–ª—é—á–∞—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞.
    """
    buttons = [
        [
            InlineKeyboardButton(text=str(i), callback_data=ArtworkRate(source_id=source_id, artwork_id=artwork_id, score=i).pack())
            for i in range(1, 6)
        ],
        [
            InlineKeyboardButton(text=str(i), callback_data=ArtworkRate(source_id=source_id, artwork_id=artwork_id, score=i).pack())
            for i in range(6, 11)
        ],
        [
            InlineKeyboardButton(
                text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É",
                callback_data=SkipAction(action='image', source_id=source_id, post_idx=post_idx).pack()
            ),
            InlineKeyboardButton(
                text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ—Å—Ç",
                callback_data=SkipAction(action='post', source_id=source_id, post_idx=post_idx).pack()
            )
        ],
        [
            InlineKeyboardButton(text="üö´ –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data=Action(name="stop_eval").pack())
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def get_files_to_delete(files: list):
    buttons = []
    for file_source in files:
        buttons.append([
            InlineKeyboardButton(
                text=f"üóëÔ∏è {file_source.name}",
                callback_data=Action(name="delete_source", source_id=file_source.source_id).pack()
            )
        ])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_cancel_fsm_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–∏–∞–ª–æ–≥–∞)."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=Action(name="cancel_fsm").pack())]
    ])


def get_search_target_keyboard():
    buttons = [
        [InlineKeyboardButton(
            text="–¢–µ–≥–∏ (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)",
            # –ë—ã–ª–æ: 'tags_partial', –°—Ç–∞–ª–æ: 'partial_match_for_tags'
            callback_data=SearchParam(param='target', value='partial_match_for_tags').pack()
        )],
        [InlineKeyboardButton(
            text="–¢–µ–≥–∏ (–ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)",
            # –ë—ã–ª–æ: 'tags_exact', –°—Ç–∞–ª–æ: 'exact_match_for_tags'
            callback_data=SearchParam(param='target', value='exact_match_for_tags').pack()
        )],
        [InlineKeyboardButton(
            text="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ",
            # –≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –±—ã–ª–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º, –Ω–æ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è –æ—Å—Ç–∞–≤–ª—è–µ–º.
            callback_data=SearchParam(param='target', value='title_and_caption').pack()
        )],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=Action(name="cancel_fsm").pack())]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_search_rating_keyboard():
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –¢–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (SFW)",
                              callback_data=SearchParam(param='rating', value='safe').pack())],
        [InlineKeyboardButton(text="üîû –¢–æ–ª—å–∫–æ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö (R-18)",
                              callback_data=SearchParam(param='rating', value='r18').pack())],
        [InlineKeyboardButton(text="üåê –õ—é–±–æ–π —Ä–µ–π—Ç–∏–Ω–≥", callback_data=SearchParam(param='rating', value='all').pack())],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=Action(name="cancel_fsm").pack())]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_search_period_keyboard():
    buttons = [
        [InlineKeyboardButton(text="–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è", callback_data=SearchParam(param='period', value='all').pack())],
        [InlineKeyboardButton(text="–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü",
                              callback_data=SearchParam(param='period', value='month').pack())],
        [InlineKeyboardButton(text="–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é",
                              callback_data=SearchParam(param='period', value='week').pack())],
        [InlineKeyboardButton(text="–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å", callback_data=SearchParam(param='period', value='day').pack())],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=Action(name="cancel_fsm").pack())]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def get_queries_menu(queries: list):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ."""
    buttons = [
        [InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", callback_data="create_new_query")]
    ]

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º enumerate –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫, –Ω–∞—á–∏–Ω–∞—è —Å 1
    for i, query_source in enumerate(queries, 1):
        query_text = query_source.details.get('query', 'N/A')
        rating = query_source.details.get('rating', 'N/A').upper()

        # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–º–µ—Ä –∏ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        button_text = f"{i}. üîç {query_text[:25]}... ({rating})"

        buttons.append([
            InlineKeyboardButton(
                text=button_text,
                callback_data=SourceSelect(source_id=query_source.source_id).pack()
            )
        ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_export_options_keyboard():
    buttons = [
        [InlineKeyboardButton(text="üìä –ú–æ–∏ –æ—Ü–µ–Ω–∫–∏", callback_data="export_mine")],
        [InlineKeyboardButton(text="üë§ –û—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID", callback_data="export_specific_user")],
        [InlineKeyboardButton(text="üåê –í—Å–µ –æ—Ü–µ–Ω–∫–∏ (–≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)", callback_data="export_all")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=Action(name="cancel_fsm").pack())],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)
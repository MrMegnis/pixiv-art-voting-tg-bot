# app/handlers/user_content.py
import os
import json
import csv
import io
from typing import Union, List
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.database import requests as rq
from app.database.models import Rating
from app.keyboards import inline as ikb
from app.keyboards.callback_data import Action
from app.states.user_states import UserContentStates, ExportStates
from app.database.engine import DATA_DIR

router = Router()


async def is_authorized_filter(event: Union[Message, CallbackQuery], session: AsyncSession):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    –†–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –∏ –¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤.
    """
    user = await rq.get_or_create_user(session, event.from_user.id)
    return user.is_authorized


# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–æ –≤—Å–µ–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º –≤ —ç—Ç–æ–º —Ä–æ—É—Ç–µ—Ä–µ
router.message.filter(is_authorized_filter)
router.callback_query.filter(is_authorized_filter)


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSV ---
async def generate_ratings_csv(ratings: List[Rating], filename: str) -> BufferedInputFile:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç CSV —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ü–µ–Ω–æ–∫."""
    output = io.StringIO()
    writer = csv.writer(output)

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ CSV
    writer.writerow([
        'user_id', 'username', 'artwork_id', 'title', 'author',
        'artwork_url', 'user_score', 'source_name', 'rated_at'
    ])

    for rating in ratings:
        writer.writerow([
            rating.user.user_id,
            rating.user.username,
            rating.artwork.pixiv_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º pixiv_id –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            rating.artwork.title,
            rating.artwork.author,
            rating.artwork.url,
            rating.score,
            rating.source.name if rating.source else "–£–¥–∞–ª–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫",
            rating.created_at.strftime("%Y-%m-%d %H:%M:%S")
        ])

    output.seek(0)
    return BufferedInputFile(output.getvalue().encode('utf-8'), filename=filename)

# --- Upload ---
@router.callback_query(F.data == "upload_file")
async def start_upload(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserContentStates.waiting_for_file)
    await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ .json —Ñ–∞–π–ª —Å –∞—Ä—Ç–∞–º–∏.",
        reply_markup=ikb.get_cancel_fsm_keyboard()
    )
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ –ø—Ä–æ–ø–∞–ª–∏


@router.message(UserContentStates.waiting_for_file, F.document)
async def process_upload(message: Message, state: FSMContext, session: AsyncSession):
    document = message.document
    if not document.file_name.endswith('.json'):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .json —Ñ–∞–π–ª.")
        return

    filepath = os.path.join(DATA_DIR, document.file_name)
    await message.bot.download(document, destination=filepath)

    await rq.add_file_source(session, document.file_name, filepath, message.from_user.id)
    await message.answer(f"–§–∞–π–ª '{document.file_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –æ—Ü–µ–Ω–∫–µ.")
    await state.clear()


# --- Delete ---
@router.callback_query(F.data == "delete_file")
async def select_file_to_delete(callback: CallbackQuery, session: AsyncSession):
    user_files = await rq.get_user_file_sources(session, callback.from_user.id)
    if not user_files:
        await callback.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.", show_alert=True)
        return

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=await ikb.get_files_to_delete(user_files)
    )


@router.callback_query(Action.filter(F.name == "delete_source"))
async def confirm_delete(callback: CallbackQuery, callback_data: Action, session: AsyncSession):
    source = await rq.get_source_by_id(session, callback_data.source_id)
    if not source or source.owner_id != callback.from_user.id:
        await callback.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ.", show_alert=True)
        return

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
    filepath = source.details.get('path')
    if filepath and os.path.exists(filepath):
        try:
            os.remove(filepath)
        except OSError as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filepath}: {e}")

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
    await rq.delete_source_by_owner(session, callback_data.source_id, callback.from_user.id)
    await callback.message.edit_text(f"–§–∞–π–ª '{source.name}' –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")


# --- My Stuff ---
@router.callback_query(F.data == "my_stuff")
async def my_stuff_handler(callback: CallbackQuery, session: AsyncSession):
    files = await rq.get_user_file_sources(session, callback.from_user.id)
    if not files:
        await callback.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.", show_alert=True)
        return

    response_text = "–í–∞—à–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n\n"
    for file in files:
        response_text += f"üìÅ {file.name}\n"

    await callback.message.edit_text(response_text)
    await callback.answer()


# --- Export ---
# 1. –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
@router.callback_query(F.data == "export_data")
async def export_data_handler(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞:",
        reply_markup=ikb.get_export_options_keyboard()
    )
    await callback.answer()


# 2. –≠–∫—Å–ø–æ—Ä—Ç —Å–≤–æ–∏—Ö –æ—Ü–µ–Ω–æ–∫
@router.callback_query(F.data == "export_mine")
async def export_mine_handler(callback: CallbackQuery, session: AsyncSession):
    await callback.answer("–ù–∞—á–∏–Ω–∞—é —ç–∫—Å–ø–æ—Ä—Ç –≤–∞—à–∏—Ö –æ—Ü–µ–Ω–æ–∫...")
    ratings = await rq.get_user_ratings_for_export(session, callback.from_user.id)

    if not ratings:
        await callback.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    csv_file = await generate_ratings_csv(ratings, f'export_my_{callback.from_user.id}.csv')
    await callback.message.answer_document(csv_file)
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º –º–µ–Ω—é


# 3. –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –æ—Ü–µ–Ω–æ–∫
@router.callback_query(F.data == "export_all")
async def export_all_handler(callback: CallbackQuery, session: AsyncSession):
    await callback.answer("–ù–∞—á–∏–Ω–∞—é —ç–∫—Å–ø–æ—Ä—Ç –í–°–ï–• –æ—Ü–µ–Ω–æ–∫...")
    ratings = await rq.get_all_ratings_for_export(session)

    if not ratings:
        await callback.message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—â–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –æ—Ü–µ–Ω–∫–∏.")
        return

    csv_file = await generate_ratings_csv(ratings, 'export_all_users.csv')
    await callback.message.answer_document(csv_file)
    await callback.message.delete()


# 4. –î–∏–∞–ª–æ–≥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ ID
@router.callback_query(F.data == "export_specific_user")
async def export_specific_user_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ExportStates.waiting_for_user_id)
    await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ü–µ–Ω–∫–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å.",
        reply_markup=ikb.get_cancel_fsm_keyboard()
    )
    await callback.answer()


@router.message(ExportStates.waiting_for_user_id)
async def export_specific_user_process(message: Message, state: FSMContext, session: AsyncSession):
    if not message.text.isdigit():
        await message.answer("–û—à–∏–±–∫–∞. Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    user_id = int(message.text)
    await state.clear()

    await message.answer(f"–ù–∞—á–∏–Ω–∞—é —ç–∫—Å–ø–æ—Ä—Ç –æ—Ü–µ–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
    ratings = await rq.get_user_ratings_for_export(session, user_id)

    if not ratings:
        await message.answer(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ü–µ–Ω–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}.")
        return

    csv_file = await generate_ratings_csv(ratings, f'export_user_{user_id}.csv')
    await message.answer_document(csv_file)

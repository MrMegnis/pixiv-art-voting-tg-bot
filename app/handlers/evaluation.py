import json
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.database import requests as rq
from app.keyboards import inline as ikb
from app.keyboards.callback_data import SourceSelect, ArtworkRate, Action, SearchParam, SkipAction
from app.states.user_states import PixivSearchStates
from app.utils.pixiv import pixiv_client

logger = logging.getLogger(__name__)

router = Router()


# --- –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞—Ä—Ç–∞ –Ω–∞ –æ—Ü–µ–Ω–∫—É ---
async def send_next_art_for_rating(message: Message, session: AsyncSession, source_id: int, user_id: int):
    source = await rq.get_source_by_id(session, source_id)
    if not source:
        await message.answer("–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    progress = await rq.get_user_progress(session, user_id, source_id)
    start_post_index = progress.last_post_index if progress else 0
    start_image_index = progress.last_image_index if progress else 0

    arts_to_check = []
    api_offset = 0
    local_start_index = 0

    if source.source_type == 'file':
        try:
            with open(source.details['path'], 'r', encoding='utf-8') as f:
                raw_json = json.load(f)
                arts_to_check = raw_json.get('illusts', raw_json)
            local_start_index = start_post_index
        except (FileNotFoundError, json.JSONDecodeError):
            await message.answer("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –∞—Ä—Ç–∞–º–∏.")
            return

    elif source.source_type == 'query':
        query_params = source.details
        # --- –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã—á–∏—Å–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ —Å–º–µ—â–µ–Ω–∏–µ ---
        # API –æ—Ç–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 30 –ø–æ—Å—Ç–æ–≤.
        page_size = 30
        # –í—ã—á–∏—Å–ª—è–µ–º, –∫–∞–∫–æ–π offset –Ω–∞–º –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É API
        api_offset = (start_post_index // page_size) * page_size
        # –í—ã—á–∏—Å–ª—è–µ–º, —Å –∫–∞–∫–æ–≥–æ –ø–æ—Å—Ç–∞ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∞–º –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å
        local_start_index = start_post_index % page_size
        # -----------------------------------------------------------------

        pixiv_response = await pixiv_client.search(
            query=query_params['query'], search_target=query_params['target'],
            period=query_params['period'], rating=query_params['rating'],
            offset=api_offset
        )
        if pixiv_response and pixiv_response.illusts:
            arts_to_check = pixiv_response.illusts
        else:
            await message.answer(f"–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É '{source.name}' –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ –ø–æ—Å—Ç–∞–º –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ/–≤ —Ñ–∞–π–ª–µ
    for item_idx, art_data_raw in enumerate(arts_to_check):
        if item_idx < local_start_index:
            continue

        # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø–æ—Å—Ç–∞ (–¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)
        post_idx_global = api_offset + item_idx

        formatted_art = pixiv_client.format_illust(art_data_raw)
        image_urls = formatted_art.get('all_image_urls', [])

        # –í–ª–æ–∂–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º –≤–Ω—É—Ç—Ä–∏ –ø–æ—Å—Ç–∞
        for img_idx, image_url in enumerate(image_urls):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ –ø–µ—Ä–≤–æ–º –ø–æ—Å—Ç–µ
            if item_idx == local_start_index and img_idx < start_image_index:
                continue

            artwork_obj = await rq.get_or_create_artwork(session, formatted_art, img_idx)
            is_rated = await rq.check_user_rating_for_artwork(session, user_id, artwork_obj.id)

            if not is_rated:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –¢–ï–ö–£–©–ò–ô –∞—Ä—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                await rq.update_user_progress(session, user_id, source_id, post_idx_global, img_idx)

                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                create_date_str = formatted_art['create_date'].split('T')[0]
                tags_str = ", ".join([f"#{tag}" for tag in formatted_art.get('tags', [])])
                caption = (
                    f"<b>{artwork_obj.title}</b> (–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {img_idx + 1}/{len(image_urls)})\n"
                    f"–ê–≤—Ç–æ—Ä: {artwork_obj.author} | –î–∞—Ç–∞: {create_date_str}\n"
                    f"<a href='{artwork_obj.url}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç Pixiv</a>\n\n"
                    f"<i>–¢–µ–≥–∏: {tags_str}</i>"
                )

                try:
                    await message.answer_photo(
                        photo=image_url, caption=caption, parse_mode='HTML',
                        reply_markup=ikb.get_rating_keyboard(source_id, artwork_obj.id, post_idx_global)
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—Ä—Ç {artwork_obj.id}: {e}", exc_info=True)
                    await message.answer(caption, parse_mode='HTML',
                                         reply_markup=ikb.get_rating_keyboard(source_id, artwork_obj.id, post_idx_global))
                return

    # –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç, –≤—Å–µ –∞—Ä—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ/–≤ —Ñ–∞–π–ª–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.
    if source.source_type == 'query' and arts_to_check:
        logger.debug(f"–ó–∞–∫–æ–Ω—á–∏–ª–∞—Å—å —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{source.name}'. –ü—ã—Ç–∞—é—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é.")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –Ω–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        next_page_start_index = api_offset + len(arts_to_check)
        await rq.update_user_progress(session, user_id, source_id, next_page_start_index, 0)
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Å–µ–±—è –∂–µ, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å –∞—Ä—Ç —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await send_next_art_for_rating(message, session, source_id, user_id)
        return

    await message.answer(f"üéâ –í—ã –æ—Ü–µ–Ω–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ä—Ç—ã –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ '{source.name}'!")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ ---
@router.callback_query(F.data == "evaluate_from_file")
async def select_file_to_evaluate(callback: CallbackQuery, session: AsyncSession):
    files = await rq.get_all_file_sources(session)
    if not files:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –∏—Ö –∑–∞–≥—Ä—É–∑–∏—Ç—å.", show_alert=True)
        return

    # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ñ–∞–π–ª–∞–º
    user_progress = {}
    for file_source in files:
        progress = await rq.get_user_progress(session, callback.from_user.id, file_source.source_id)
        if progress:
            user_progress[file_source.source_id] = progress

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏:",
        reply_markup=await ikb.get_files_to_evaluate(files, user_progress)
    )


# --- FSM –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É Pixiv ---
@router.callback_query(F.data == "evaluate_from_query")
async def select_or_create_pixiv_query(callback: CallbackQuery, session: AsyncSession):
    user_queries = await rq.get_user_query_sources(session, callback.from_user.id)

    # –ì–æ—Ç–æ–≤–∏–º –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    if user_queries:
        message_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:\n"

        # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ
        target_map = {
            'partial_match_for_tags': '–¢–µ–≥–∏ (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)',
            'exact_match_for_tags': '–¢–µ–≥–∏ (–ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)',
            'title_and_caption': '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ'
        }
        rating_map = {
            'safe': '–¢–æ–ª—å–∫–æ SFW',
            'r18': '–¢–æ–ª—å–∫–æ R-18',
            'all': '–õ—é–±–æ–π —Ä–µ–π—Ç–∏–Ω–≥'
        }
        period_map = {
            'day': '–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å',
            'week': '–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é',
            'month': '–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü',
        }

        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –ø–æ–ª–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        for i, query in enumerate(user_queries, 1):
            details = query.details
            query_text = details.get('query', 'N/A')
            target_text = target_map.get(details.get('target'), 'N/A')
            rating_text = rating_map.get(details.get('rating'), 'N/A')
            period_text = period_map.get(details.get('period'), '–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è')

            message_text += (
                f"\n<b>{i}. –ó–∞–ø—Ä–æ—Å:</b> <code>{query_text}</code>\n"
                f"   - <b>–ì–¥–µ –∏—Å–∫–∞—Ç—å:</b> {target_text}\n"
                f"   - <b>–†–µ–π—Ç–∏–Ω–≥:</b> {rating_text}\n"
                f"   - <b>–ü–µ—Ä–∏–æ–¥:</b> {period_text}\n"
            )
    else:
        message_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:"

    await callback.message.edit_text(
        text=message_text,
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
        reply_markup=await ikb.get_queries_menu(user_queries),
        # –í–∫–ª—é—á–∞–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ –∏ –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        parse_mode='HTML',
        disable_web_page_preview=True
    )


@router.callback_query(F.data == "create_new_query")
async def start_pixiv_query_fsm(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PixivSearchStates.waiting_for_keywords)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n\n"
        "<b>–°–æ–≤–µ—Ç:</b> –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã:\n"
        "‚Ä¢ `word1 word2` - –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä—Ç–æ–≤ —Å –æ–±–æ–∏–º–∏ —Ç–µ–≥–∞–º–∏ (–ò)\n"
        "‚Ä¢ `word1 OR word2` - –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å –æ–¥–Ω–∏–º –∏–∑ —Ç–µ–≥–æ–≤ (–ò–õ–ò)\n"
        "‚Ä¢ `-word3` - –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–≥–∞\n"
        "‚Ä¢ `(word1 OR word2) -word3` - –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π",
        parse_mode='HTML',
        reply_markup=ikb.get_cancel_fsm_keyboard()
    )


@router.message(PixivSearchStates.waiting_for_keywords)
async def process_keywords(message: Message, state: FSMContext):
    await state.update_data(keywords=message.text)
    await state.set_state(PixivSearchStates.waiting_for_target)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, –≥–¥–µ –∏—Å–∫–∞—Ç—å:", reply_markup=ikb.get_search_target_keyboard())


@router.callback_query(PixivSearchStates.waiting_for_target, SearchParam.filter(F.param == 'target'))
async def process_target(callback: CallbackQuery, callback_data: SearchParam, state: FSMContext):
    await state.update_data(target=callback_data.value)
    await state.set_state(PixivSearchStates.waiting_for_rating)
    await callback.message.edit_text("–ü–æ–Ω—è–ª. –ö–∞–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                                     reply_markup=ikb.get_search_rating_keyboard())


@router.callback_query(PixivSearchStates.waiting_for_rating, SearchParam.filter(F.param == 'rating'))
async def process_rating_filter(callback: CallbackQuery, callback_data: SearchParam, state: FSMContext):
    await state.update_data(rating=callback_data.value)
    await state.set_state(PixivSearchStates.waiting_for_period)
    await callback.message.edit_text("–ü—Ä–∏–Ω—è—Ç–æ. –ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –∏—Å–∫–∞—Ç—å?", reply_markup=ikb.get_search_period_keyboard())


@router.callback_query(PixivSearchStates.waiting_for_period, SearchParam.filter(F.param == 'period'))
async def process_period_and_finish(callback: CallbackQuery, callback_data: SearchParam, state: FSMContext,
                                    session: AsyncSession):
    await callback.message.edit_text("–°–æ–±–∏—Ä–∞—é –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–æ–∑–¥–∞—é –∑–∞–ø—Ä–æ—Å...")
    await state.update_data(period=callback_data.value)

    data = await state.get_data()
    await state.clear()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ –ë–î
    query_details = {
        'query': data['keywords'],
        'target': data['target'],
        'rating': data['rating'],
        'period': data['period'] if data['period'] != 'all' else None,
    }

    source_name = f"–ó–∞–ø—Ä–æ—Å: {data['keywords'][:30]}..."
    new_source = await rq.add_query_source(session, source_name, query_details, callback.from_user.id)

    await callback.message.edit_text(
        f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å '{source_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –ù–∞—á–∏–Ω–∞—é –æ—Ü–µ–Ω–∫—É...",
        reply_markup=None
    )
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É –ø–æ –Ω–æ–≤–æ—Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É
    await send_next_art_for_rating(callback.message, session, new_source.source_id, callback.from_user.id)


# --- –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ü–µ–Ω–∫–∏ ---
@router.callback_query(SourceSelect.filter())
async def start_evaluation(callback: CallbackQuery, callback_data: SourceSelect, session: AsyncSession):
    await callback.message.delete()
    await send_next_art_for_rating(callback.message, session, callback_data.source_id, callback.from_user.id)

async def advance_and_send_next(callback: CallbackQuery, session: AsyncSession, source_id: int):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞—Ä—Ç—É."""
    progress = await rq.get_user_progress(session, callback.from_user.id, source_id)
    if not progress:
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    source = await rq.get_source_by_id(session, source_id)
    if source.source_type == 'file':
        # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ, –ª–æ–≥–∏–∫–∞ –≤ send_next_art_for_rating –Ω–∞–π–¥–µ—Ç –µ–µ
        await rq.update_user_progress(session, callback.from_user.id, source_id, progress.last_post_index, progress.last_image_index + 1)
    elif source.source_type == 'query':
        # –î–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –≤—ã—à–ª–∏ –ª–∏ –º—ã –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        # –≠—Ç–æ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞, –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —É–≤–µ–ª–∏—á–∏–º –∏–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–∏–Ω–∫–∏
        await rq.update_user_progress(session, callback.from_user.id, source_id, progress.last_post_index, progress.last_image_index + 1)

    await callback.message.delete()
    await send_next_art_for_rating(callback.message, session, source_id, callback.from_user.id)


@router.callback_query(ArtworkRate.filter())
async def process_artwork_rating(callback: CallbackQuery, callback_data: ArtworkRate, session: AsyncSession):
    # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
    await rq.add_rating(
        session, user_id=callback.from_user.id, artwork_id=callback_data.artwork_id,
        source_id=callback_data.source_id, score=callback_data.score
    )
    # 2. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–∏–º –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä—Ç
    await callback.message.delete()
    await send_next_art_for_rating(callback.message, session, callback_data.source_id, callback.from_user.id)


@router.callback_query(SkipAction.filter(F.action == 'image'))
async def skip_image_handler(callback: CallbackQuery, callback_data: SkipAction, session: AsyncSession):
    await callback.answer("–ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")

    progress = await rq.get_user_progress(session, callback.from_user.id, callback_data.source_id)
    if progress:
        await rq.update_user_progress(session, callback.from_user.id, callback_data.source_id, progress.last_post_index,
                                      progress.last_image_index + 1)

    await callback.message.delete()
    await send_next_art_for_rating(callback.message, session, callback_data.source_id, callback.from_user.id)


@router.callback_query(SkipAction.filter(F.action == 'post'))
async def skip_post_handler(callback: CallbackQuery, callback_data: SkipAction, session: AsyncSession):
    await callback.answer("–ü–æ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –Ω–∞—á–∞–ª–æ –°–õ–ï–î–£–Æ–©–ï–ì–û –ø–æ—Å—Ç–∞
    await rq.update_user_progress(
        session,
        user_id=callback.from_user.id,
        source_id=callback_data.source_id,
        post_index=callback_data.post_idx + 1,  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ—Å—Ç—É
        image_index=0  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
    )

    await callback.message.delete()
    await send_next_art_for_rating(callback.message, session, callback_data.source_id, callback.from_user.id)

@router.callback_query(Action.filter(F.name == "stop_eval"))
async def stop_evaluation(callback: CallbackQuery, session: AsyncSession):
    await callback.answer("–û—Ü–µ–Ω–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")

    user = await rq.get_or_create_user(session, callback.from_user.id)
    await callback.message.delete()
    await callback.message.answer("–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ü–µ–Ω–∫–µ –ø–æ–∑–∂–µ.",
                                  reply_markup=ikb.get_main_menu(user.is_authorized))

# –ó–ê–ì–õ–£–®–ö–ê –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É
# @router.callback_query(F.data == "evaluate_from_query")
# async def evaluate_from_query_stub(callback: CallbackQuery):
#     await callback.answer("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Ü–µ–Ω–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É Pixiv –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", show_alert=True)
